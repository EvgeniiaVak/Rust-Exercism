<?xml version="1.0" standalone="no"?><!DOCTYPE svg PUBLIC "-//W3C//DTD SVG 1.1//EN" "http://www.w3.org/Graphics/SVG/1.1/DTD/svg11.dtd"><svg version="1.1" width="1200" height="406" onload="init(evt)" viewBox="0 0 1200 406" xmlns="http://www.w3.org/2000/svg" xmlns:xlink="http://www.w3.org/1999/xlink" xmlns:fg="http://github.com/jonhoo/inferno"><!--Flame graph stack visualization. See https://github.com/brendangregg/FlameGraph for latest version, and http://www.brendangregg.com/flamegraphs.html for examples.--><!--NOTES: --><defs><linearGradient id="background" y1="0" y2="1" x1="0" x2="0"><stop stop-color="#eeeeee" offset="5%"/><stop stop-color="#eeeeb0" offset="95%"/></linearGradient></defs><style type="text/css">
text { font-family:monospace; font-size:12px }
#title { text-anchor:middle; font-size:17px; }
#matched { text-anchor:end; }
#search { text-anchor:end; opacity:0.1; cursor:pointer; }
#search:hover, #search.show { opacity:1; }
#subtitle { text-anchor:middle; font-color:rgb(160,160,160); }
#unzoom { cursor:pointer; }
#frames > *:hover { stroke:black; stroke-width:0.5; cursor:pointer; }
.hide { display:none; }
.parent { opacity:0.5; }
</style><script type="text/ecmascript"><![CDATA[
        var nametype = 'Function:';
        var fontsize = 12;
        var fontwidth = 0.59;
        var xpad = 10;
        var inverted = false;
        var searchcolor = 'rgb(230,0,230)';
        var fluiddrawing = true;
        var truncate_text_right = false;
    ]]><![CDATA["use strict";
var details, searchbtn, unzoombtn, matchedtxt, svg, searching, frames, known_font_width;
function init(evt) {
    details = document.getElementById("details").firstChild;
    searchbtn = document.getElementById("search");
    unzoombtn = document.getElementById("unzoom");
    matchedtxt = document.getElementById("matched");
    svg = document.getElementsByTagName("svg")[0];
    frames = document.getElementById("frames");
    known_font_width = get_monospace_width(frames);
    total_samples = parseInt(frames.attributes.total_samples.value);
    searching = 0;

    // Use GET parameters to restore a flamegraph's state.
    var restore_state = function() {
        var params = get_params();
        if (params.x && params.y)
            zoom(find_group(document.querySelector('[*|x="' + params.x + '"][y="' + params.y + '"]')));
        if (params.s)
            search(params.s);
    };

    if (fluiddrawing) {
        // Make width dynamic so the SVG fits its parent's width.
        svg.removeAttribute("width");
        // Edge requires us to have a viewBox that gets updated with size changes.
        var isEdge = /Edge\/\d./i.test(navigator.userAgent);
        if (!isEdge) {
            svg.removeAttribute("viewBox");
        }
        var update_for_width_change = function() {
            if (isEdge) {
                svg.attributes.viewBox.value = "0 0 " + svg.width.baseVal.value + " " + svg.height.baseVal.value;
            }

            // Keep consistent padding on left and right of frames container.
            frames.attributes.width.value = svg.width.baseVal.value - xpad * 2;

            // Text truncation needs to be adjusted for the current width.
            update_text_for_elements(frames.children);

            // Keep search elements at a fixed distance from right edge.
            var svgWidth = svg.width.baseVal.value;
            searchbtn.attributes.x.value = svgWidth - xpad;
            matchedtxt.attributes.x.value = svgWidth - xpad;
        };
        window.addEventListener('resize', function() {
            update_for_width_change();
        });
        // This needs to be done asynchronously for Safari to work.
        setTimeout(function() {
            unzoom();
            update_for_width_change();
            restore_state();
        }, 0);
    } else {
        restore_state();
    }
}
// event listeners
window.addEventListener("click", function(e) {
    var target = find_group(e.target);
    if (target) {
        if (target.nodeName == "a") {
            if (e.ctrlKey === false) return;
            e.preventDefault();
        }
        if (target.classList.contains("parent")) unzoom();
        zoom(target);

        // set parameters for zoom state
        var el = target.querySelector("rect");
        if (el && el.attributes && el.attributes.y && el.attributes["fg:x"]) {
            var params = get_params()
            params.x = el.attributes["fg:x"].value;
            params.y = el.attributes.y.value;
            history.replaceState(null, null, parse_params(params));
        }
    }
    else if (e.target.id == "unzoom") {
        unzoom();

        // remove zoom state
        var params = get_params();
        if (params.x) delete params.x;
        if (params.y) delete params.y;
        history.replaceState(null, null, parse_params(params));
    }
    else if (e.target.id == "search") search_prompt();
}, false)
// mouse-over for info
// show
window.addEventListener("mouseover", function(e) {
    var target = find_group(e.target);
    if (target) details.nodeValue = nametype + " " + g_to_text(target);
}, false)
// clear
window.addEventListener("mouseout", function(e) {
    var target = find_group(e.target);
    if (target) details.nodeValue = ' ';
}, false)
// ctrl-F for search
window.addEventListener("keydown",function (e) {
    if (e.keyCode === 114 || (e.ctrlKey && e.keyCode === 70)) {
        e.preventDefault();
        search_prompt();
    }
}, false)
// functions
function get_params() {
    var params = {};
    var paramsarr = window.location.search.substr(1).split('&');
    for (var i = 0; i < paramsarr.length; ++i) {
        var tmp = paramsarr[i].split("=");
        if (!tmp[0] || !tmp[1]) continue;
        params[tmp[0]]  = decodeURIComponent(tmp[1]);
    }
    return params;
}
function parse_params(params) {
    var uri = "?";
    for (var key in params) {
        uri += key + '=' + encodeURIComponent(params[key]) + '&';
    }
    if (uri.slice(-1) == "&")
        uri = uri.substring(0, uri.length - 1);
    if (uri == '?')
        uri = window.location.href.split('?')[0];
    return uri;
}
function find_child(node, selector) {
    var children = node.querySelectorAll(selector);
    if (children.length) return children[0];
    return;
}
function find_group(node) {
    var parent = node.parentElement;
    if (!parent) return;
    if (parent.id == "frames") return node;
    return find_group(parent);
}
function orig_save(e, attr, val) {
    if (e.attributes["fg:orig_" + attr] != undefined) return;
    if (e.attributes[attr] == undefined) return;
    if (val == undefined) val = e.attributes[attr].value;
    e.setAttribute("fg:orig_" + attr, val);
}
function orig_load(e, attr) {
    if (e.attributes["fg:orig_"+attr] == undefined) return;
    e.attributes[attr].value = e.attributes["fg:orig_" + attr].value;
    e.removeAttribute("fg:orig_" + attr);
}
function g_to_text(e) {
    var text = find_child(e, "title").firstChild.nodeValue;
    return (text)
}
function g_to_func(e) {
    var func = g_to_text(e);
    // if there's any manipulation we want to do to the function
    // name before it's searched, do it here before returning.
    return (func);
}
function get_monospace_width(frames) {
    // Given the id="frames" element, return the width of text characters if
    // this is a monospace font, otherwise return 0.
    text = find_child(frames.children[0], "text");
    originalContent = text.textContent;
    text.textContent = "!";
    bangWidth = text.getComputedTextLength();
    text.textContent = "W";
    wWidth = text.getComputedTextLength();
    text.textContent = originalContent;
    if (bangWidth === wWidth) {
        return bangWidth;
    } else {
        return 0;
    }
}
function update_text_for_elements(elements) {
    // In order to render quickly in the browser, you want to do one pass of
    // reading attributes, and one pass of mutating attributes. See
    // https://web.dev/avoid-large-complex-layouts-and-layout-thrashing/ for details.

    // Fall back to inefficient calculation, if we're variable-width font.
    // TODO This should be optimized somehow too.
    if (known_font_width === 0) {
        for (var i = 0; i < elements.length; i++) {
            update_text(elements[i]);
        }
        return;
    }

    var textElemNewAttributes = [];
    for (var i = 0; i < elements.length; i++) {
        var e = elements[i];
        var r = find_child(e, "rect");
        var t = find_child(e, "text");
        var w = parseFloat(r.attributes.width.value) * frames.attributes.width.value / 100 - 3;
        var txt = find_child(e, "title").textContent.replace(/\([^(]*\)$/,"");
        var newX = format_percent((parseFloat(r.attributes.x.value) + (100 * 3 / frames.attributes.width.value)));

        // Smaller than this size won't fit anything
        if (w < 2 * known_font_width) {
            textElemNewAttributes.push([newX, ""]);
            continue;
        }

        // Fit in full text width
        if (txt.length * known_font_width < w) {
            textElemNewAttributes.push([newX, txt]);
            continue;
        }

        var substringLength = Math.floor(w / known_font_width) - 2;
        if (truncate_text_right) {
            // Truncate the right side of the text.
            textElemNewAttributes.push([newX, txt.substring(0, substringLength) + ".."]);
            continue;
        } else {
            // Truncate the left side of the text.
            textElemNewAttributes.push([newX, ".." + txt.substring(txt.length - substringLength, txt.length)]);
            continue;
        }
    }

    console.assert(textElemNewAttributes.length === elements.length, "Resize failed, please file a bug at https://github.com/jonhoo/inferno/");

    // Now that we know new textContent, set it all in one go so we don't refresh a bazillion times.
    for (var i = 0; i < elements.length; i++) {
        var e = elements[i];
        var values = textElemNewAttributes[i];
        var t = find_child(e, "text");
        t.attributes.x.value = values[0];
        t.textContent = values[1];
    }
}

function update_text(e) {
    var r = find_child(e, "rect");
    var t = find_child(e, "text");
    var w = parseFloat(r.attributes.width.value) * frames.attributes.width.value / 100 - 3;
    var txt = find_child(e, "title").textContent.replace(/\([^(]*\)$/,"");
    t.attributes.x.value = format_percent((parseFloat(r.attributes.x.value) + (100 * 3 / frames.attributes.width.value)));

    // Smaller than this size won't fit anything
    if (w < 2 * fontsize * fontwidth) {
        t.textContent = "";
        return;
    }
    t.textContent = txt;
    // Fit in full text width
    if (t.getComputedTextLength() < w)
        return;
    if (truncate_text_right) {
        // Truncate the right side of the text.
        for (var x = txt.length - 2; x > 0; x--) {
            if (t.getSubStringLength(0, x + 2) <= w) {
                t.textContent = txt.substring(0, x) + "..";
                return;
            }
        }
    } else {
        // Truncate the left side of the text.
        for (var x = 2; x < txt.length; x++) {
            if (t.getSubStringLength(x - 2, txt.length) <= w) {
                t.textContent = ".." + txt.substring(x, txt.length);
                return;
            }
        }
    }
    t.textContent = "";
}
// zoom
function zoom_reset(e) {
    if (e.tagName == "rect") {
        e.attributes.x.value = format_percent(100 * parseInt(e.attributes["fg:x"].value) / total_samples);
        e.attributes.width.value = format_percent(100 * parseInt(e.attributes["fg:w"].value) / total_samples);
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_reset(c[i]);
    }
}
function zoom_child(e, x, zoomed_width_samples) {
    if (e.tagName == "text") {
        var parent_x = parseFloat(find_child(e.parentNode, "rect[x]").attributes.x.value);
        e.attributes.x.value = format_percent(parent_x + (100 * 3 / frames.attributes.width.value));
    } else if (e.tagName == "rect") {
        e.attributes.x.value = format_percent(100 * (parseInt(e.attributes["fg:x"].value) - x) / zoomed_width_samples);
        e.attributes.width.value = format_percent(100 * parseInt(e.attributes["fg:w"].value) / zoomed_width_samples);
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_child(c[i], x, zoomed_width_samples);
    }
}
function zoom_parent(e) {
    if (e.attributes) {
        if (e.attributes.x != undefined) {
            e.attributes.x.value = "0.0%";
        }
        if (e.attributes.width != undefined) {
            e.attributes.width.value = "100.0%";
        }
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_parent(c[i]);
    }
}
function zoom(node) {
    var attr = find_child(node, "rect").attributes;
    var width = parseInt(attr["fg:w"].value);
    var xmin = parseInt(attr["fg:x"].value);
    var xmax = xmin + width;
    var ymin = parseFloat(attr.y.value);
    unzoombtn.classList.remove("hide");
    var el = frames.children;
    var to_update_text = [];
    for (var i = 0; i < el.length; i++) {
        var e = el[i];
        var a = find_child(e, "rect").attributes;
        var ex = parseInt(a["fg:x"].value);
        var ew = parseInt(a["fg:w"].value);
        // Is it an ancestor
        if (!inverted) {
            var upstack = parseFloat(a.y.value) > ymin;
        } else {
            var upstack = parseFloat(a.y.value) < ymin;
        }
        if (upstack) {
            // Direct ancestor
            if (ex <= xmin && (ex+ew) >= xmax) {
                e.classList.add("parent");
                zoom_parent(e);
                to_update_text.push(e);
            }
            // not in current path
            else
                e.classList.add("hide");
        }
        // Children maybe
        else {
            // no common path
            if (ex < xmin || ex >= xmax) {
                e.classList.add("hide");
            }
            else {
                zoom_child(e, xmin, width);
                to_update_text.push(e);
            }
        }
    }
    update_text_for_elements(to_update_text);
}
function unzoom() {
    unzoombtn.classList.add("hide");
    var el = frames.children;
    for(var i = 0; i < el.length; i++) {
        el[i].classList.remove("parent");
        el[i].classList.remove("hide");
        zoom_reset(el[i]);
    }
    update_text_for_elements(el);
}
// search
function reset_search() {
    var el = document.querySelectorAll("#frames rect");
    for (var i = 0; i < el.length; i++) {
        orig_load(el[i], "fill")
    }
    var params = get_params();
    delete params.s;
    history.replaceState(null, null, parse_params(params));
}
function search_prompt() {
    if (!searching) {
        var term = prompt("Enter a search term (regexp " +
            "allowed, eg: ^ext4_)", "");
        if (term != null) {
            search(term)
        }
    } else {
        reset_search();
        searching = 0;
        searchbtn.classList.remove("show");
        searchbtn.firstChild.nodeValue = "Search"
        matchedtxt.classList.add("hide");
        matchedtxt.firstChild.nodeValue = ""
    }
}
function search(term) {
    var re = new RegExp(term);
    var el = frames.children;
    var matches = new Object();
    var maxwidth = 0;
    for (var i = 0; i < el.length; i++) {
        var e = el[i];
        // Skip over frames which are either not visible, or below the zoomed-to frame
        if (e.classList.contains("hide") || e.classList.contains("parent")) {
            continue;
        }
        var func = g_to_func(e);
        var rect = find_child(e, "rect");
        if (func == null || rect == null)
            continue;
        // Save max width. Only works as we have a root frame
        var w = parseInt(rect.attributes["fg:w"].value);
        if (w > maxwidth)
            maxwidth = w;
        if (func.match(re)) {
            // highlight
            var x = parseInt(rect.attributes["fg:x"].value);
            orig_save(rect, "fill");
            rect.attributes.fill.value = searchcolor;
            // remember matches
            if (matches[x] == undefined) {
                matches[x] = w;
            } else {
                if (w > matches[x]) {
                    // overwrite with parent
                    matches[x] = w;
                }
            }
            searching = 1;
        }
    }
    if (!searching)
        return;
    var params = get_params();
    params.s = term;
    history.replaceState(null, null, parse_params(params));

    searchbtn.classList.add("show");
    searchbtn.firstChild.nodeValue = "Reset Search";
    // calculate percent matched, excluding vertical overlap
    var count = 0;
    var lastx = -1;
    var lastw = 0;
    var keys = Array();
    for (k in matches) {
        if (matches.hasOwnProperty(k))
            keys.push(k);
    }
    // sort the matched frames by their x location
    // ascending, then width descending
    keys.sort(function(a, b){
        return a - b;
    });
    // Step through frames saving only the biggest bottom-up frames
    // thanks to the sort order. This relies on the tree property
    // where children are always smaller than their parents.
    for (var k in keys) {
        var x = parseInt(keys[k]);
        var w = matches[keys[k]];
        if (x >= lastx + lastw) {
            count += w;
            lastx = x;
            lastw = w;
        }
    }
    // display matched percent
    matchedtxt.classList.remove("hide");
    var pct = 100 * count / maxwidth;
    if (pct != 100) pct = pct.toFixed(1);
    matchedtxt.firstChild.nodeValue = "Matched: " + pct + "%";
}
function format_percent(n) {
    return n.toFixed(4) + "%";
}
]]></script><rect x="0" y="0" width="100%" height="406" fill="url(#background)"/><text id="title" fill="rgb(0,0,0)" x="50.0000%" y="24.00">Flame Graph</text><text id="details" fill="rgb(0,0,0)" x="10" y="389.00"> </text><text id="unzoom" class="hide" fill="rgb(0,0,0)" x="10" y="24.00">Reset Zoom</text><text id="search" fill="rgb(0,0,0)" x="1190" y="24.00">Search</text><text id="matched" fill="rgb(0,0,0)" x="1190" y="389.00"> </text><svg id="frames" x="10" width="1180" total_samples="17"><g><title>6152318976 (3 samples, 17.65%)</title><rect x="0.0000%" y="341" width="17.6471%" height="15" fill="rgb(239,133,26)" fg:x="0" fg:w="3"/><text x="0.2500%" y="351.50">6152318976</text></g><g><title>__pthread_deallocate (3 samples, 17.65%)</title><rect x="0.0000%" y="325" width="17.6471%" height="15" fill="rgb(211,94,48)" fg:x="0" fg:w="3"/><text x="0.2500%" y="335.50">__pthread_deallocate</text></g><g><title>std::sys::unix::thread::Thread::new::thread_start (3 samples, 17.65%)</title><rect x="0.0000%" y="309" width="17.6471%" height="15" fill="rgb(239,87,6)" fg:x="0" fg:w="3"/><text x="0.2500%" y="319.50">std::sys::unix::thread::Thr..</text></g><g><title>&lt;alloc::boxed::Box&lt;F,A&gt; as core::ops::function::FnOnce&lt;Args&gt;&gt;::call_once (3 samples, 17.65%)</title><rect x="0.0000%" y="293" width="17.6471%" height="15" fill="rgb(227,62,0)" fg:x="0" fg:w="3"/><text x="0.2500%" y="303.50">&lt;alloc::boxed::Box&lt;F,A&gt; as ..</text></g><g><title>&lt;alloc::boxed::Box&lt;F,A&gt; as core::ops::function::FnOnce&lt;Args&gt;&gt;::call_once (3 samples, 17.65%)</title><rect x="0.0000%" y="277" width="17.6471%" height="15" fill="rgb(211,226,4)" fg:x="0" fg:w="3"/><text x="0.2500%" y="287.50">&lt;alloc::boxed::Box&lt;F,A&gt; as ..</text></g><g><title>core::ops::function::FnOnce::call_once{{vtable.shim}} (3 samples, 17.65%)</title><rect x="0.0000%" y="261" width="17.6471%" height="15" fill="rgb(253,38,52)" fg:x="0" fg:w="3"/><text x="0.2500%" y="271.50">core::ops::function::FnOnce..</text></g><g><title>std::thread::Builder::spawn_unchecked_::{{closure}} (3 samples, 17.65%)</title><rect x="0.0000%" y="245" width="17.6471%" height="15" fill="rgb(229,126,40)" fg:x="0" fg:w="3"/><text x="0.2500%" y="255.50">std::thread::Builder::spawn..</text></g><g><title>std::panic::catch_unwind (3 samples, 17.65%)</title><rect x="0.0000%" y="229" width="17.6471%" height="15" fill="rgb(229,165,44)" fg:x="0" fg:w="3"/><text x="0.2500%" y="239.50">std::panic::catch_unwind</text></g><g><title>std::panicking::try (3 samples, 17.65%)</title><rect x="0.0000%" y="213" width="17.6471%" height="15" fill="rgb(247,95,47)" fg:x="0" fg:w="3"/><text x="0.2500%" y="223.50">std::panicking::try</text></g><g><title>std::panicking::try::do_call (3 samples, 17.65%)</title><rect x="0.0000%" y="197" width="17.6471%" height="15" fill="rgb(216,140,30)" fg:x="0" fg:w="3"/><text x="0.2500%" y="207.50">std::panicking::try::do_call</text></g><g><title>&lt;core::panic::unwind_safe::AssertUnwindSafe&lt;F&gt; as core::ops::function::FnOnce&lt;()&gt;&gt;::call_once (3 samples, 17.65%)</title><rect x="0.0000%" y="181" width="17.6471%" height="15" fill="rgb(246,214,8)" fg:x="0" fg:w="3"/><text x="0.2500%" y="191.50">&lt;core::panic::unwind_safe::..</text></g><g><title>std::thread::Builder::spawn_unchecked_::{{closure}}::{{closure}} (3 samples, 17.65%)</title><rect x="0.0000%" y="165" width="17.6471%" height="15" fill="rgb(227,224,15)" fg:x="0" fg:w="3"/><text x="0.2500%" y="175.50">std::thread::Builder::spawn..</text></g><g><title>std::sys_common::backtrace::__rust_begin_short_backtrace (3 samples, 17.65%)</title><rect x="0.0000%" y="149" width="17.6471%" height="15" fill="rgb(233,175,4)" fg:x="0" fg:w="3"/><text x="0.2500%" y="159.50">std::sys_common::backtrace:..</text></g><g><title>sublist::is_superlist_threads::{{closure}}::{{closure}} (3 samples, 17.65%)</title><rect x="0.0000%" y="133" width="17.6471%" height="15" fill="rgb(221,66,45)" fg:x="0" fg:w="3"/><text x="0.2500%" y="143.50">sublist::is_superlist_threa..</text></g><g><title>std::sync::mutex::Mutex&lt;T&gt;::lock (3 samples, 17.65%)</title><rect x="0.0000%" y="117" width="17.6471%" height="15" fill="rgb(221,178,18)" fg:x="0" fg:w="3"/><text x="0.2500%" y="127.50">std::sync::mutex::Mutex&lt;T&gt;:..</text></g><g><title>std::sys_common::mutex::MovableMutex::raw_lock (3 samples, 17.65%)</title><rect x="0.0000%" y="101" width="17.6471%" height="15" fill="rgb(213,81,29)" fg:x="0" fg:w="3"/><text x="0.2500%" y="111.50">std::sys_common::mutex::Mov..</text></g><g><title>std::sys::unix::locks::pthread_mutex::Mutex::lock (3 samples, 17.65%)</title><rect x="0.0000%" y="85" width="17.6471%" height="15" fill="rgb(220,89,49)" fg:x="0" fg:w="3"/><text x="0.2500%" y="95.50">std::sys::unix::locks::pthr..</text></g><g><title>__pthread_main_thread_init (3 samples, 17.65%)</title><rect x="0.0000%" y="69" width="17.6471%" height="15" fill="rgb(227,60,33)" fg:x="0" fg:w="3"/><text x="0.2500%" y="79.50">__pthread_main_thread_init</text></g><g><title>_pthread_rwlock_wrlock (3 samples, 17.65%)</title><rect x="0.0000%" y="53" width="17.6471%" height="15" fill="rgb(205,113,12)" fg:x="0" fg:w="3"/><text x="0.2500%" y="63.50">_pthread_rwlock_wrlock</text></g><g><title>6154465280 (4 samples, 23.53%)</title><rect x="17.6471%" y="341" width="23.5294%" height="15" fill="rgb(211,32,1)" fg:x="3" fg:w="4"/><text x="17.8971%" y="351.50">6154465280</text></g><g><title>__pthread_deallocate (4 samples, 23.53%)</title><rect x="17.6471%" y="325" width="23.5294%" height="15" fill="rgb(246,2,12)" fg:x="3" fg:w="4"/><text x="17.8971%" y="335.50">__pthread_deallocate</text></g><g><title>std::sys::unix::thread::Thread::new::thread_start (4 samples, 23.53%)</title><rect x="17.6471%" y="309" width="23.5294%" height="15" fill="rgb(243,37,27)" fg:x="3" fg:w="4"/><text x="17.8971%" y="319.50">std::sys::unix::thread::Thread::new::..</text></g><g><title>&lt;alloc::boxed::Box&lt;F,A&gt; as core::ops::function::FnOnce&lt;Args&gt;&gt;::call_once (4 samples, 23.53%)</title><rect x="17.6471%" y="293" width="23.5294%" height="15" fill="rgb(248,211,31)" fg:x="3" fg:w="4"/><text x="17.8971%" y="303.50">&lt;alloc::boxed::Box&lt;F,A&gt; as core::ops:..</text></g><g><title>&lt;alloc::boxed::Box&lt;F,A&gt; as core::ops::function::FnOnce&lt;Args&gt;&gt;::call_once (4 samples, 23.53%)</title><rect x="17.6471%" y="277" width="23.5294%" height="15" fill="rgb(242,146,47)" fg:x="3" fg:w="4"/><text x="17.8971%" y="287.50">&lt;alloc::boxed::Box&lt;F,A&gt; as core::ops:..</text></g><g><title>core::ops::function::FnOnce::call_once{{vtable.shim}} (4 samples, 23.53%)</title><rect x="17.6471%" y="261" width="23.5294%" height="15" fill="rgb(206,70,20)" fg:x="3" fg:w="4"/><text x="17.8971%" y="271.50">core::ops::function::FnOnce::call_onc..</text></g><g><title>std::thread::Builder::spawn_unchecked_::{{closure}} (4 samples, 23.53%)</title><rect x="17.6471%" y="245" width="23.5294%" height="15" fill="rgb(215,10,51)" fg:x="3" fg:w="4"/><text x="17.8971%" y="255.50">std::thread::Builder::spawn_unchecked..</text></g><g><title>std::panic::catch_unwind (4 samples, 23.53%)</title><rect x="17.6471%" y="229" width="23.5294%" height="15" fill="rgb(243,178,53)" fg:x="3" fg:w="4"/><text x="17.8971%" y="239.50">std::panic::catch_unwind</text></g><g><title>std::panicking::try (4 samples, 23.53%)</title><rect x="17.6471%" y="213" width="23.5294%" height="15" fill="rgb(233,221,20)" fg:x="3" fg:w="4"/><text x="17.8971%" y="223.50">std::panicking::try</text></g><g><title>std::panicking::try::do_call (4 samples, 23.53%)</title><rect x="17.6471%" y="197" width="23.5294%" height="15" fill="rgb(218,95,35)" fg:x="3" fg:w="4"/><text x="17.8971%" y="207.50">std::panicking::try::do_call</text></g><g><title>&lt;core::panic::unwind_safe::AssertUnwindSafe&lt;F&gt; as core::ops::function::FnOnce&lt;()&gt;&gt;::call_once (4 samples, 23.53%)</title><rect x="17.6471%" y="181" width="23.5294%" height="15" fill="rgb(229,13,5)" fg:x="3" fg:w="4"/><text x="17.8971%" y="191.50">&lt;core::panic::unwind_safe::AssertUnwi..</text></g><g><title>std::thread::Builder::spawn_unchecked_::{{closure}}::{{closure}} (4 samples, 23.53%)</title><rect x="17.6471%" y="165" width="23.5294%" height="15" fill="rgb(252,164,30)" fg:x="3" fg:w="4"/><text x="17.8971%" y="175.50">std::thread::Builder::spawn_unchecked..</text></g><g><title>std::sys_common::backtrace::__rust_begin_short_backtrace (4 samples, 23.53%)</title><rect x="17.6471%" y="149" width="23.5294%" height="15" fill="rgb(232,68,36)" fg:x="3" fg:w="4"/><text x="17.8971%" y="159.50">std::sys_common::backtrace::__rust_be..</text></g><g><title>sublist::is_superlist_threads::{{closure}}::{{closure}} (4 samples, 23.53%)</title><rect x="17.6471%" y="133" width="23.5294%" height="15" fill="rgb(219,59,54)" fg:x="3" fg:w="4"/><text x="17.8971%" y="143.50">sublist::is_superlist_threads::{{clos..</text></g><g><title>core::ptr::drop_in_place&lt;std::sync::mutex::MutexGuard&lt;alloc::collections::vec_deque::VecDeque&lt;sublist::is_superlist_threads&lt;char&gt;::{{closure}}&gt;&gt;&gt; (4 samples, 23.53%)</title><rect x="17.6471%" y="117" width="23.5294%" height="15" fill="rgb(250,92,33)" fg:x="3" fg:w="4"/><text x="17.8971%" y="127.50">core::ptr::drop_in_place&lt;std::sync::m..</text></g><g><title>&lt;std::sync::mutex::MutexGuard&lt;T&gt; as core::ops::drop::Drop&gt;::drop (4 samples, 23.53%)</title><rect x="17.6471%" y="101" width="23.5294%" height="15" fill="rgb(229,162,54)" fg:x="3" fg:w="4"/><text x="17.8971%" y="111.50">&lt;std::sync::mutex::MutexGuard&lt;T&gt; as c..</text></g><g><title>std::sys_common::mutex::MovableMutex::raw_unlock (4 samples, 23.53%)</title><rect x="17.6471%" y="85" width="23.5294%" height="15" fill="rgb(244,114,52)" fg:x="3" fg:w="4"/><text x="17.8971%" y="95.50">std::sys_common::mutex::MovableMutex:..</text></g><g><title>std::sys::unix::locks::pthread_mutex::Mutex::unlock (4 samples, 23.53%)</title><rect x="17.6471%" y="69" width="23.5294%" height="15" fill="rgb(212,211,43)" fg:x="3" fg:w="4"/><text x="17.8971%" y="79.50">std::sys::unix::locks::pthread_mutex:..</text></g><g><title>__pthread_mutex_global_init (4 samples, 23.53%)</title><rect x="17.6471%" y="53" width="23.5294%" height="15" fill="rgb(226,147,8)" fg:x="3" fg:w="4"/><text x="17.8971%" y="63.50">__pthread_mutex_global_init</text></g><g><title>__pthread_markcancel_if_canceled (4 samples, 23.53%)</title><rect x="17.6471%" y="37" width="23.5294%" height="15" fill="rgb(226,23,13)" fg:x="3" fg:w="4"/><text x="17.8971%" y="47.50">__pthread_markcancel_if_canceled</text></g><g><title>6156611584 (2 samples, 11.76%)</title><rect x="41.1765%" y="341" width="11.7647%" height="15" fill="rgb(240,63,4)" fg:x="7" fg:w="2"/><text x="41.4265%" y="351.50">6156611584</text></g><g><title>__pthread_deallocate (2 samples, 11.76%)</title><rect x="41.1765%" y="325" width="11.7647%" height="15" fill="rgb(221,1,32)" fg:x="7" fg:w="2"/><text x="41.4265%" y="335.50">__pthread_dealloc..</text></g><g><title>std::sys::unix::thread::Thread::new::thread_start (2 samples, 11.76%)</title><rect x="41.1765%" y="309" width="11.7647%" height="15" fill="rgb(242,117,10)" fg:x="7" fg:w="2"/><text x="41.4265%" y="319.50">std::sys::unix::t..</text></g><g><title>&lt;alloc::boxed::Box&lt;F,A&gt; as core::ops::function::FnOnce&lt;Args&gt;&gt;::call_once (2 samples, 11.76%)</title><rect x="41.1765%" y="293" width="11.7647%" height="15" fill="rgb(249,172,44)" fg:x="7" fg:w="2"/><text x="41.4265%" y="303.50">&lt;alloc::boxed::Bo..</text></g><g><title>&lt;alloc::boxed::Box&lt;F,A&gt; as core::ops::function::FnOnce&lt;Args&gt;&gt;::call_once (2 samples, 11.76%)</title><rect x="41.1765%" y="277" width="11.7647%" height="15" fill="rgb(244,46,45)" fg:x="7" fg:w="2"/><text x="41.4265%" y="287.50">&lt;alloc::boxed::Bo..</text></g><g><title>core::ops::function::FnOnce::call_once{{vtable.shim}} (2 samples, 11.76%)</title><rect x="41.1765%" y="261" width="11.7647%" height="15" fill="rgb(206,43,17)" fg:x="7" fg:w="2"/><text x="41.4265%" y="271.50">core::ops::functi..</text></g><g><title>std::thread::Builder::spawn_unchecked_::{{closure}} (2 samples, 11.76%)</title><rect x="41.1765%" y="245" width="11.7647%" height="15" fill="rgb(239,218,39)" fg:x="7" fg:w="2"/><text x="41.4265%" y="255.50">std::thread::Buil..</text></g><g><title>std::panic::catch_unwind (2 samples, 11.76%)</title><rect x="41.1765%" y="229" width="11.7647%" height="15" fill="rgb(208,169,54)" fg:x="7" fg:w="2"/><text x="41.4265%" y="239.50">std::panic::catch..</text></g><g><title>std::panicking::try (2 samples, 11.76%)</title><rect x="41.1765%" y="213" width="11.7647%" height="15" fill="rgb(247,25,42)" fg:x="7" fg:w="2"/><text x="41.4265%" y="223.50">std::panicking::t..</text></g><g><title>std::panicking::try::do_call (2 samples, 11.76%)</title><rect x="41.1765%" y="197" width="11.7647%" height="15" fill="rgb(226,23,31)" fg:x="7" fg:w="2"/><text x="41.4265%" y="207.50">std::panicking::t..</text></g><g><title>&lt;core::panic::unwind_safe::AssertUnwindSafe&lt;F&gt; as core::ops::function::FnOnce&lt;()&gt;&gt;::call_once (2 samples, 11.76%)</title><rect x="41.1765%" y="181" width="11.7647%" height="15" fill="rgb(247,16,28)" fg:x="7" fg:w="2"/><text x="41.4265%" y="191.50">&lt;core::panic::unw..</text></g><g><title>std::thread::Builder::spawn_unchecked_::{{closure}}::{{closure}} (2 samples, 11.76%)</title><rect x="41.1765%" y="165" width="11.7647%" height="15" fill="rgb(231,147,38)" fg:x="7" fg:w="2"/><text x="41.4265%" y="175.50">std::thread::Buil..</text></g><g><title>std::sys_common::backtrace::__rust_begin_short_backtrace (2 samples, 11.76%)</title><rect x="41.1765%" y="149" width="11.7647%" height="15" fill="rgb(253,81,48)" fg:x="7" fg:w="2"/><text x="41.4265%" y="159.50">std::sys_common::..</text></g><g><title>sublist::is_superlist_threads::{{closure}}::{{closure}} (2 samples, 11.76%)</title><rect x="41.1765%" y="133" width="11.7647%" height="15" fill="rgb(249,222,43)" fg:x="7" fg:w="2"/><text x="41.4265%" y="143.50">sublist::is_super..</text></g><g><title>std::sync::mutex::Mutex&lt;T&gt;::lock (2 samples, 11.76%)</title><rect x="41.1765%" y="117" width="11.7647%" height="15" fill="rgb(221,3,27)" fg:x="7" fg:w="2"/><text x="41.4265%" y="127.50">std::sync::mutex:..</text></g><g><title>std::sys_common::mutex::MovableMutex::raw_lock (2 samples, 11.76%)</title><rect x="41.1765%" y="101" width="11.7647%" height="15" fill="rgb(228,180,5)" fg:x="7" fg:w="2"/><text x="41.4265%" y="111.50">std::sys_common::..</text></g><g><title>std::sys::unix::locks::pthread_mutex::Mutex::lock (2 samples, 11.76%)</title><rect x="41.1765%" y="85" width="11.7647%" height="15" fill="rgb(227,131,42)" fg:x="7" fg:w="2"/><text x="41.4265%" y="95.50">std::sys::unix::l..</text></g><g><title>__pthread_main_thread_init (2 samples, 11.76%)</title><rect x="41.1765%" y="69" width="11.7647%" height="15" fill="rgb(212,3,39)" fg:x="7" fg:w="2"/><text x="41.4265%" y="79.50">__pthread_main_th..</text></g><g><title>_pthread_rwlock_wrlock (2 samples, 11.76%)</title><rect x="41.1765%" y="53" width="11.7647%" height="15" fill="rgb(226,45,5)" fg:x="7" fg:w="2"/><text x="41.4265%" y="63.50">_pthread_rwlock_w..</text></g><g><title>6158757888 (2 samples, 11.76%)</title><rect x="52.9412%" y="341" width="11.7647%" height="15" fill="rgb(215,167,45)" fg:x="9" fg:w="2"/><text x="53.1912%" y="351.50">6158757888</text></g><g><title>__pthread_deallocate (2 samples, 11.76%)</title><rect x="52.9412%" y="325" width="11.7647%" height="15" fill="rgb(250,218,53)" fg:x="9" fg:w="2"/><text x="53.1912%" y="335.50">__pthread_dealloc..</text></g><g><title>std::sys::unix::thread::Thread::new::thread_start (2 samples, 11.76%)</title><rect x="52.9412%" y="309" width="11.7647%" height="15" fill="rgb(207,140,0)" fg:x="9" fg:w="2"/><text x="53.1912%" y="319.50">std::sys::unix::t..</text></g><g><title>&lt;alloc::boxed::Box&lt;F,A&gt; as core::ops::function::FnOnce&lt;Args&gt;&gt;::call_once (2 samples, 11.76%)</title><rect x="52.9412%" y="293" width="11.7647%" height="15" fill="rgb(238,133,51)" fg:x="9" fg:w="2"/><text x="53.1912%" y="303.50">&lt;alloc::boxed::Bo..</text></g><g><title>&lt;alloc::boxed::Box&lt;F,A&gt; as core::ops::function::FnOnce&lt;Args&gt;&gt;::call_once (2 samples, 11.76%)</title><rect x="52.9412%" y="277" width="11.7647%" height="15" fill="rgb(218,203,53)" fg:x="9" fg:w="2"/><text x="53.1912%" y="287.50">&lt;alloc::boxed::Bo..</text></g><g><title>core::ops::function::FnOnce::call_once{{vtable.shim}} (2 samples, 11.76%)</title><rect x="52.9412%" y="261" width="11.7647%" height="15" fill="rgb(226,184,25)" fg:x="9" fg:w="2"/><text x="53.1912%" y="271.50">core::ops::functi..</text></g><g><title>std::thread::Builder::spawn_unchecked_::{{closure}} (2 samples, 11.76%)</title><rect x="52.9412%" y="245" width="11.7647%" height="15" fill="rgb(231,121,21)" fg:x="9" fg:w="2"/><text x="53.1912%" y="255.50">std::thread::Buil..</text></g><g><title>std::panic::catch_unwind (2 samples, 11.76%)</title><rect x="52.9412%" y="229" width="11.7647%" height="15" fill="rgb(251,14,34)" fg:x="9" fg:w="2"/><text x="53.1912%" y="239.50">std::panic::catch..</text></g><g><title>std::panicking::try (2 samples, 11.76%)</title><rect x="52.9412%" y="213" width="11.7647%" height="15" fill="rgb(249,193,11)" fg:x="9" fg:w="2"/><text x="53.1912%" y="223.50">std::panicking::t..</text></g><g><title>std::panicking::try::do_call (2 samples, 11.76%)</title><rect x="52.9412%" y="197" width="11.7647%" height="15" fill="rgb(220,172,37)" fg:x="9" fg:w="2"/><text x="53.1912%" y="207.50">std::panicking::t..</text></g><g><title>&lt;core::panic::unwind_safe::AssertUnwindSafe&lt;F&gt; as core::ops::function::FnOnce&lt;()&gt;&gt;::call_once (2 samples, 11.76%)</title><rect x="52.9412%" y="181" width="11.7647%" height="15" fill="rgb(231,229,43)" fg:x="9" fg:w="2"/><text x="53.1912%" y="191.50">&lt;core::panic::unw..</text></g><g><title>std::thread::Builder::spawn_unchecked_::{{closure}}::{{closure}} (2 samples, 11.76%)</title><rect x="52.9412%" y="165" width="11.7647%" height="15" fill="rgb(250,161,5)" fg:x="9" fg:w="2"/><text x="53.1912%" y="175.50">std::thread::Buil..</text></g><g><title>std::sys_common::backtrace::__rust_begin_short_backtrace (2 samples, 11.76%)</title><rect x="52.9412%" y="149" width="11.7647%" height="15" fill="rgb(218,225,18)" fg:x="9" fg:w="2"/><text x="53.1912%" y="159.50">std::sys_common::..</text></g><g><title>sublist::is_superlist_threads::{{closure}}::{{closure}} (2 samples, 11.76%)</title><rect x="52.9412%" y="133" width="11.7647%" height="15" fill="rgb(245,45,42)" fg:x="9" fg:w="2"/><text x="53.1912%" y="143.50">sublist::is_super..</text></g><g><title>std::sync::mutex::Mutex&lt;T&gt;::lock (2 samples, 11.76%)</title><rect x="52.9412%" y="117" width="11.7647%" height="15" fill="rgb(211,115,1)" fg:x="9" fg:w="2"/><text x="53.1912%" y="127.50">std::sync::mutex:..</text></g><g><title>std::sys_common::mutex::MovableMutex::raw_lock (2 samples, 11.76%)</title><rect x="52.9412%" y="101" width="11.7647%" height="15" fill="rgb(248,133,52)" fg:x="9" fg:w="2"/><text x="53.1912%" y="111.50">std::sys_common::..</text></g><g><title>std::sys::unix::locks::pthread_mutex::Mutex::lock (2 samples, 11.76%)</title><rect x="52.9412%" y="85" width="11.7647%" height="15" fill="rgb(238,100,21)" fg:x="9" fg:w="2"/><text x="53.1912%" y="95.50">std::sys::unix::l..</text></g><g><title>__pthread_main_thread_init (2 samples, 11.76%)</title><rect x="52.9412%" y="69" width="11.7647%" height="15" fill="rgb(247,144,11)" fg:x="9" fg:w="2"/><text x="53.1912%" y="79.50">__pthread_main_th..</text></g><g><title>_pthread_rwlock_wrlock (2 samples, 11.76%)</title><rect x="52.9412%" y="53" width="11.7647%" height="15" fill="rgb(206,164,16)" fg:x="9" fg:w="2"/><text x="53.1912%" y="63.50">_pthread_rwlock_w..</text></g><g><title>core::ptr::drop_in_place&lt;std::sync::mutex::MutexGuard&lt;alloc::collections::vec_deque::VecDeque&lt;sublist::is_superlist_threads&lt;char&gt;::{{closure}}&gt;&gt;&gt; (1 samples, 5.88%)</title><rect x="64.7059%" y="117" width="5.8824%" height="15" fill="rgb(222,34,3)" fg:x="11" fg:w="1"/><text x="64.9559%" y="127.50">core::p..</text></g><g><title>&lt;std::sync::mutex::MutexGuard&lt;T&gt; as core::ops::drop::Drop&gt;::drop (1 samples, 5.88%)</title><rect x="64.7059%" y="101" width="5.8824%" height="15" fill="rgb(248,82,4)" fg:x="11" fg:w="1"/><text x="64.9559%" y="111.50">&lt;std::s..</text></g><g><title>std::sys_common::mutex::MovableMutex::raw_unlock (1 samples, 5.88%)</title><rect x="64.7059%" y="85" width="5.8824%" height="15" fill="rgb(228,81,46)" fg:x="11" fg:w="1"/><text x="64.9559%" y="95.50">std::sy..</text></g><g><title>std::sys::unix::locks::pthread_mutex::Mutex::unlock (1 samples, 5.88%)</title><rect x="64.7059%" y="69" width="5.8824%" height="15" fill="rgb(227,67,47)" fg:x="11" fg:w="1"/><text x="64.9559%" y="79.50">std::sy..</text></g><g><title>__pthread_mutex_global_init (1 samples, 5.88%)</title><rect x="64.7059%" y="53" width="5.8824%" height="15" fill="rgb(215,93,53)" fg:x="11" fg:w="1"/><text x="64.9559%" y="63.50">__pthre..</text></g><g><title>__pthread_markcancel_if_canceled (1 samples, 5.88%)</title><rect x="64.7059%" y="37" width="5.8824%" height="15" fill="rgb(248,194,39)" fg:x="11" fg:w="1"/><text x="64.9559%" y="47.50">__pthre..</text></g><g><title>6160904192 (3 samples, 17.65%)</title><rect x="64.7059%" y="341" width="17.6471%" height="15" fill="rgb(215,5,19)" fg:x="11" fg:w="3"/><text x="64.9559%" y="351.50">6160904192</text></g><g><title>__pthread_deallocate (3 samples, 17.65%)</title><rect x="64.7059%" y="325" width="17.6471%" height="15" fill="rgb(226,215,51)" fg:x="11" fg:w="3"/><text x="64.9559%" y="335.50">__pthread_deallocate</text></g><g><title>std::sys::unix::thread::Thread::new::thread_start (3 samples, 17.65%)</title><rect x="64.7059%" y="309" width="17.6471%" height="15" fill="rgb(225,56,26)" fg:x="11" fg:w="3"/><text x="64.9559%" y="319.50">std::sys::unix::thread::Thr..</text></g><g><title>&lt;alloc::boxed::Box&lt;F,A&gt; as core::ops::function::FnOnce&lt;Args&gt;&gt;::call_once (3 samples, 17.65%)</title><rect x="64.7059%" y="293" width="17.6471%" height="15" fill="rgb(222,75,29)" fg:x="11" fg:w="3"/><text x="64.9559%" y="303.50">&lt;alloc::boxed::Box&lt;F,A&gt; as ..</text></g><g><title>&lt;alloc::boxed::Box&lt;F,A&gt; as core::ops::function::FnOnce&lt;Args&gt;&gt;::call_once (3 samples, 17.65%)</title><rect x="64.7059%" y="277" width="17.6471%" height="15" fill="rgb(236,139,6)" fg:x="11" fg:w="3"/><text x="64.9559%" y="287.50">&lt;alloc::boxed::Box&lt;F,A&gt; as ..</text></g><g><title>core::ops::function::FnOnce::call_once{{vtable.shim}} (3 samples, 17.65%)</title><rect x="64.7059%" y="261" width="17.6471%" height="15" fill="rgb(223,137,36)" fg:x="11" fg:w="3"/><text x="64.9559%" y="271.50">core::ops::function::FnOnce..</text></g><g><title>std::thread::Builder::spawn_unchecked_::{{closure}} (3 samples, 17.65%)</title><rect x="64.7059%" y="245" width="17.6471%" height="15" fill="rgb(226,99,2)" fg:x="11" fg:w="3"/><text x="64.9559%" y="255.50">std::thread::Builder::spawn..</text></g><g><title>std::panic::catch_unwind (3 samples, 17.65%)</title><rect x="64.7059%" y="229" width="17.6471%" height="15" fill="rgb(206,133,23)" fg:x="11" fg:w="3"/><text x="64.9559%" y="239.50">std::panic::catch_unwind</text></g><g><title>std::panicking::try (3 samples, 17.65%)</title><rect x="64.7059%" y="213" width="17.6471%" height="15" fill="rgb(243,173,15)" fg:x="11" fg:w="3"/><text x="64.9559%" y="223.50">std::panicking::try</text></g><g><title>std::panicking::try::do_call (3 samples, 17.65%)</title><rect x="64.7059%" y="197" width="17.6471%" height="15" fill="rgb(228,69,28)" fg:x="11" fg:w="3"/><text x="64.9559%" y="207.50">std::panicking::try::do_call</text></g><g><title>&lt;core::panic::unwind_safe::AssertUnwindSafe&lt;F&gt; as core::ops::function::FnOnce&lt;()&gt;&gt;::call_once (3 samples, 17.65%)</title><rect x="64.7059%" y="181" width="17.6471%" height="15" fill="rgb(212,51,22)" fg:x="11" fg:w="3"/><text x="64.9559%" y="191.50">&lt;core::panic::unwind_safe::..</text></g><g><title>std::thread::Builder::spawn_unchecked_::{{closure}}::{{closure}} (3 samples, 17.65%)</title><rect x="64.7059%" y="165" width="17.6471%" height="15" fill="rgb(227,113,0)" fg:x="11" fg:w="3"/><text x="64.9559%" y="175.50">std::thread::Builder::spawn..</text></g><g><title>std::sys_common::backtrace::__rust_begin_short_backtrace (3 samples, 17.65%)</title><rect x="64.7059%" y="149" width="17.6471%" height="15" fill="rgb(252,84,27)" fg:x="11" fg:w="3"/><text x="64.9559%" y="159.50">std::sys_common::backtrace:..</text></g><g><title>sublist::is_superlist_threads::{{closure}}::{{closure}} (3 samples, 17.65%)</title><rect x="64.7059%" y="133" width="17.6471%" height="15" fill="rgb(223,145,39)" fg:x="11" fg:w="3"/><text x="64.9559%" y="143.50">sublist::is_superlist_threa..</text></g><g><title>std::sync::mutex::Mutex&lt;T&gt;::lock (2 samples, 11.76%)</title><rect x="70.5882%" y="117" width="11.7647%" height="15" fill="rgb(239,219,30)" fg:x="12" fg:w="2"/><text x="70.8382%" y="127.50">std::sync::mutex:..</text></g><g><title>std::sys_common::mutex::MovableMutex::raw_lock (2 samples, 11.76%)</title><rect x="70.5882%" y="101" width="11.7647%" height="15" fill="rgb(224,196,39)" fg:x="12" fg:w="2"/><text x="70.8382%" y="111.50">std::sys_common::..</text></g><g><title>std::sys::unix::locks::pthread_mutex::Mutex::lock (2 samples, 11.76%)</title><rect x="70.5882%" y="85" width="11.7647%" height="15" fill="rgb(205,35,43)" fg:x="12" fg:w="2"/><text x="70.8382%" y="95.50">std::sys::unix::l..</text></g><g><title>__pthread_main_thread_init (2 samples, 11.76%)</title><rect x="70.5882%" y="69" width="11.7647%" height="15" fill="rgb(228,201,21)" fg:x="12" fg:w="2"/><text x="70.8382%" y="79.50">__pthread_main_th..</text></g><g><title>_pthread_rwlock_wrlock (2 samples, 11.76%)</title><rect x="70.5882%" y="53" width="11.7647%" height="15" fill="rgb(237,118,16)" fg:x="12" fg:w="2"/><text x="70.8382%" y="63.50">_pthread_rwlock_w..</text></g><g><title>core::ptr::drop_in_place&lt;std::sync::mutex::MutexGuard&lt;alloc::collections::vec_deque::VecDeque&lt;sublist::is_superlist_threads&lt;char&gt;::{{closure}}&gt;&gt;&gt; (1 samples, 5.88%)</title><rect x="82.3529%" y="117" width="5.8824%" height="15" fill="rgb(241,17,19)" fg:x="14" fg:w="1"/><text x="82.6029%" y="127.50">core::p..</text></g><g><title>&lt;std::sync::mutex::MutexGuard&lt;T&gt; as core::ops::drop::Drop&gt;::drop (1 samples, 5.88%)</title><rect x="82.3529%" y="101" width="5.8824%" height="15" fill="rgb(214,10,25)" fg:x="14" fg:w="1"/><text x="82.6029%" y="111.50">&lt;std::s..</text></g><g><title>std::sys_common::mutex::MovableMutex::raw_unlock (1 samples, 5.88%)</title><rect x="82.3529%" y="85" width="5.8824%" height="15" fill="rgb(238,37,29)" fg:x="14" fg:w="1"/><text x="82.6029%" y="95.50">std::sy..</text></g><g><title>std::sys::unix::locks::pthread_mutex::Mutex::unlock (1 samples, 5.88%)</title><rect x="82.3529%" y="69" width="5.8824%" height="15" fill="rgb(253,83,25)" fg:x="14" fg:w="1"/><text x="82.6029%" y="79.50">std::sy..</text></g><g><title>__pthread_mutex_global_init (1 samples, 5.88%)</title><rect x="82.3529%" y="53" width="5.8824%" height="15" fill="rgb(234,192,12)" fg:x="14" fg:w="1"/><text x="82.6029%" y="63.50">__pthre..</text></g><g><title>__pthread_markcancel_if_canceled (1 samples, 5.88%)</title><rect x="82.3529%" y="37" width="5.8824%" height="15" fill="rgb(241,216,45)" fg:x="14" fg:w="1"/><text x="82.6029%" y="47.50">__pthre..</text></g><g><title>all (17 samples, 100%)</title><rect x="0.0000%" y="357" width="100.0000%" height="15" fill="rgb(242,22,33)" fg:x="0" fg:w="17"/><text x="0.2500%" y="367.50"></text></g><g><title>6165196800 (3 samples, 17.65%)</title><rect x="82.3529%" y="341" width="17.6471%" height="15" fill="rgb(231,105,49)" fg:x="14" fg:w="3"/><text x="82.6029%" y="351.50">6165196800</text></g><g><title>__pthread_deallocate (3 samples, 17.65%)</title><rect x="82.3529%" y="325" width="17.6471%" height="15" fill="rgb(218,204,15)" fg:x="14" fg:w="3"/><text x="82.6029%" y="335.50">__pthread_deallocate</text></g><g><title>std::sys::unix::thread::Thread::new::thread_start (3 samples, 17.65%)</title><rect x="82.3529%" y="309" width="17.6471%" height="15" fill="rgb(235,138,41)" fg:x="14" fg:w="3"/><text x="82.6029%" y="319.50">std::sys::unix::thread::Thr..</text></g><g><title>&lt;alloc::boxed::Box&lt;F,A&gt; as core::ops::function::FnOnce&lt;Args&gt;&gt;::call_once (3 samples, 17.65%)</title><rect x="82.3529%" y="293" width="17.6471%" height="15" fill="rgb(246,0,9)" fg:x="14" fg:w="3"/><text x="82.6029%" y="303.50">&lt;alloc::boxed::Box&lt;F,A&gt; as ..</text></g><g><title>&lt;alloc::boxed::Box&lt;F,A&gt; as core::ops::function::FnOnce&lt;Args&gt;&gt;::call_once (3 samples, 17.65%)</title><rect x="82.3529%" y="277" width="17.6471%" height="15" fill="rgb(210,74,4)" fg:x="14" fg:w="3"/><text x="82.6029%" y="287.50">&lt;alloc::boxed::Box&lt;F,A&gt; as ..</text></g><g><title>core::ops::function::FnOnce::call_once{{vtable.shim}} (3 samples, 17.65%)</title><rect x="82.3529%" y="261" width="17.6471%" height="15" fill="rgb(250,60,41)" fg:x="14" fg:w="3"/><text x="82.6029%" y="271.50">core::ops::function::FnOnce..</text></g><g><title>std::thread::Builder::spawn_unchecked_::{{closure}} (3 samples, 17.65%)</title><rect x="82.3529%" y="245" width="17.6471%" height="15" fill="rgb(220,115,12)" fg:x="14" fg:w="3"/><text x="82.6029%" y="255.50">std::thread::Builder::spawn..</text></g><g><title>std::panic::catch_unwind (3 samples, 17.65%)</title><rect x="82.3529%" y="229" width="17.6471%" height="15" fill="rgb(237,100,13)" fg:x="14" fg:w="3"/><text x="82.6029%" y="239.50">std::panic::catch_unwind</text></g><g><title>std::panicking::try (3 samples, 17.65%)</title><rect x="82.3529%" y="213" width="17.6471%" height="15" fill="rgb(213,55,26)" fg:x="14" fg:w="3"/><text x="82.6029%" y="223.50">std::panicking::try</text></g><g><title>std::panicking::try::do_call (3 samples, 17.65%)</title><rect x="82.3529%" y="197" width="17.6471%" height="15" fill="rgb(216,17,4)" fg:x="14" fg:w="3"/><text x="82.6029%" y="207.50">std::panicking::try::do_call</text></g><g><title>&lt;core::panic::unwind_safe::AssertUnwindSafe&lt;F&gt; as core::ops::function::FnOnce&lt;()&gt;&gt;::call_once (3 samples, 17.65%)</title><rect x="82.3529%" y="181" width="17.6471%" height="15" fill="rgb(220,153,47)" fg:x="14" fg:w="3"/><text x="82.6029%" y="191.50">&lt;core::panic::unwind_safe::..</text></g><g><title>std::thread::Builder::spawn_unchecked_::{{closure}}::{{closure}} (3 samples, 17.65%)</title><rect x="82.3529%" y="165" width="17.6471%" height="15" fill="rgb(215,131,9)" fg:x="14" fg:w="3"/><text x="82.6029%" y="175.50">std::thread::Builder::spawn..</text></g><g><title>std::sys_common::backtrace::__rust_begin_short_backtrace (3 samples, 17.65%)</title><rect x="82.3529%" y="149" width="17.6471%" height="15" fill="rgb(233,46,42)" fg:x="14" fg:w="3"/><text x="82.6029%" y="159.50">std::sys_common::backtrace:..</text></g><g><title>sublist::is_superlist_threads::{{closure}}::{{closure}} (3 samples, 17.65%)</title><rect x="82.3529%" y="133" width="17.6471%" height="15" fill="rgb(226,86,7)" fg:x="14" fg:w="3"/><text x="82.6029%" y="143.50">sublist::is_superlist_threa..</text></g><g><title>std::sync::mutex::Mutex&lt;T&gt;::lock (2 samples, 11.76%)</title><rect x="88.2353%" y="117" width="11.7647%" height="15" fill="rgb(239,226,21)" fg:x="15" fg:w="2"/><text x="88.4853%" y="127.50">std::sync::mutex:..</text></g><g><title>std::sys_common::mutex::MovableMutex::raw_lock (2 samples, 11.76%)</title><rect x="88.2353%" y="101" width="11.7647%" height="15" fill="rgb(244,137,22)" fg:x="15" fg:w="2"/><text x="88.4853%" y="111.50">std::sys_common::..</text></g><g><title>std::sys::unix::locks::pthread_mutex::Mutex::lock (2 samples, 11.76%)</title><rect x="88.2353%" y="85" width="11.7647%" height="15" fill="rgb(211,139,35)" fg:x="15" fg:w="2"/><text x="88.4853%" y="95.50">std::sys::unix::l..</text></g><g><title>__pthread_main_thread_init (2 samples, 11.76%)</title><rect x="88.2353%" y="69" width="11.7647%" height="15" fill="rgb(214,62,50)" fg:x="15" fg:w="2"/><text x="88.4853%" y="79.50">__pthread_main_th..</text></g><g><title>_pthread_rwlock_wrlock (2 samples, 11.76%)</title><rect x="88.2353%" y="53" width="11.7647%" height="15" fill="rgb(212,113,44)" fg:x="15" fg:w="2"/><text x="88.4853%" y="63.50">_pthread_rwlock_w..</text></g></svg></svg>